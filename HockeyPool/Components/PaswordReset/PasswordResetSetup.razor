@page "/ResetPasswordSetup"
@attribute [Authorize(Roles = "Admin")]

@using HockeyPool.Components.PaswordReset
@using HockeyPool.Infrastructure.Data.Models
@using HockeyPool.Services

@inject UserRepository userRepository
@inject ClipboardService ClipboardService
@inject NavigationManager NavigationManager

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h3">Sākt paroles atiestatīšanu</MudText>
    <MudForm Class="mud-table" @ref="form">
        <MudSelect Variant="Variant.Filled" T="string" @bind-value="SelectedUser" Label="Lietotājs" AnchorOrigin="Origin.BottomCenter" MultiSelection="false" Required="true" ErrorText="Nepieciešams izvēlēties lietotāju">
            @foreach (var user in users)
            {
                <MudSelectItem Value="@user.Email">@user.Email</MudSelectItem>
            }
        </MudSelect>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Ģenerēt atiestatīšanas adresi</MudButton>
        </MudCardActions>
    </MudForm>
    @if (ShowResetUrl)
    {
        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
        <div class="content-align">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.ContentCopy" OnClick="CopyToClipboard">@ResetUrl</MudButton>
        </div>
    }

</MudContainer>


@code {
    MudForm form;
    List<ApplicationUser> users;
    private string SelectedUser { get; set; }
    private bool ShowResetUrl { get; set; }
    private string ResetUrl { get; set; }

    override protected async Task OnInitializedAsync()
    {
        users = await userRepository.GetAllAsync();
    }

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            ShowResetUrl = true;
            Random rnd = new Random();
            int code = rnd.Next(99, 999);
            PasswordResetList.Requests.Add(new PasswordToResetRequest { Code = code, Email = SelectedUser, RequestedAt = DateTime.Now });
            ResetUrl = $"{NavigationManager.BaseUri}ResetPassword?Code={code}";
            await form.ResetAsync();
            StateHasChanged();
        }
    }

    private async Task CopyToClipboard()
    {
        await ClipboardService.CopyToClipboard(ResetUrl);
    }
}