@page "/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using HockeyPool.Components.Account
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

<PageTitle>Reset password</PageTitle>

@if (loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
        <h2>Paroles atjaunošana.</h2>
        <hr />
        <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <input type="hidden" name="Input.Code" value="@Input.Code" />
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Ievadi paroli." />
                <label style="color:black" for="password" class="form-label">Parole</label>
                <ValidationMessage For="() => Input.Password" class="bg-danger text-white" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Atkārto paroli." />
                <label style="color:black" for="confirm-password" class="form-label">Atkārtot paroli</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="bg-danger text-white" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Atjaunot</button>
        </EditForm>
    </MudContainer>
}

@code {
    private bool loading = true;
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Code))
        {
            NavigateToFailedReset();
            return Task.CompletedTask;
        };

        if (Guid.TryParse(Code, out var parsedCode))
        {
            if (!PasswordResetList.Requests.Any(_ => _.Code == parsedCode))
            {
                NavigateToFailedReset();
            }
            else
            {
                Input.Code = parsedCode;
            }
        }
        else
        {
            NavigateToFailedReset();
        }

        loading = false;
        return Task.CompletedTask;
    }

    public void NavigateToFailedReset()
    {
        try
        {
            NavigationManager.NavigateTo("/NiceTryButNo");
        }
        catch (Exception e)
        {
            //ignore there is issue with this
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var resetAdminRequest = PasswordResetList.Requests.FirstOrDefault(_ => _.Code == Input.Code);
        if (resetAdminRequest == null || string.IsNullOrWhiteSpace(resetAdminRequest.Email))
        {
            NavigateToFailedReset();
        }

        if (resetAdminRequest!.RequestedAt.AddMinutes(10) <= DateTime.Now)
        {
            PasswordResetList.Requests.Remove(resetAdminRequest);
            NavigateToFailedReset();
        }

        var user = await UserManager.FindByEmailAsync(resetAdminRequest.Email);
        if (user is null)
        {
            NavigateToFailedReset();
        }

        var token = await UserManager.GeneratePasswordResetTokenAsync(user);
        var result = await UserManager.ResetPasswordAsync(user, token, Input.Password);
        if (result.Succeeded)
        {
            PasswordResetList.Requests.Remove(resetAdminRequest);
            NavigationManager.NavigateTo("/ResetPasswordConfirmation");
        }
        else
        {
            NavigateToFailedReset();
        }
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [MinLength(3, ErrorMessage = "Parolei jābūt vismaz 3 simboliem")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Apstiprini paroli")]
        [Compare("Password", ErrorMessage = "Parolēm Jāsakrīt.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public Guid Code { get; set; }
    }
}
