@page "/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using HockeyPool.Components.Account
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

<PageTitle>Reset password</PageTitle>

@if (loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
        <h2>Reset your password.</h2>
        <hr />
        <div class="row">
            <div class="col-md-4">
                <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator />
                    <input type="hidden" name="Input.Code" value="@Input.Code" />
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your password." />
                        <label style="color:black" for="password" class="form-label">Password</label>
                        <ValidationMessage For="() => Input.Password" class="bg-danger text-white" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your password." />
                        <label style="color:black" for="confirm-password" class="form-label">Confirm password</label>
                        <ValidationMessage For="() => Input.ConfirmPassword" class="bg-danger text-white" />
                    </div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Reset</button>
                </EditForm>
            </div>
        </div>
    </MudContainer>
}
@code {
    private bool loading = true;
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Code))
        {
            NavigateToFailedReset();
            return Task.CompletedTask;
        };

        if (int.TryParse(Code, out var parsedCode))
        {
            if (!PasswordResetList.PasswordToReset.ContainsValue(parsedCode))
            {
                NavigateToFailedReset();
            }
            else
            {
                Input.Code = parsedCode;
            }
        }
        else
        {
            NavigateToFailedReset();
        }

        loading = false;
        return Task.CompletedTask;
    }

    public void NavigateToFailedReset()
    {
        try
        {
            NavigationManager.NavigateTo("/NiceTryButNo");
        }
        catch (Exception e)
        {
            //ignore there is issue with this
        }
    }

    private async Task OnValidSubmitAsync()
    {
        if (!PasswordResetList.PasswordToReset.ContainsValue(Input.Code))
        {
            NavigateToFailedReset();
        }
        // var user = await UserManager.FindByEmailAsync(Input.Email);
        // if (user is null)
        // {
        //     // Don't reveal that the user does not exist

        // }

        // var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        // if (result.Succeeded)
        // {
        //     RedirectManager.RedirectTo("http://www.quickmeme.com/img/e4/e4e66bc437fb19844ca10d26f09dbe951a27b8e1da93b6054bb1f87a8ff06a62.jpg");
        // }

        // identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public int Code { get; set; }
    }
}
