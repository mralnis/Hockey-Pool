@page "/Overview"
@using HockeyPool.Infrastructure.Data.Repos
@inject MatchupRepository matchupRepo
@inject UserRepository userRepository
@inject PredictionsRepository predictionsRepository
@inject CountryRepository countryRepository

<MudText Typo="Typo.h3" Style="color:white">Rezultāti!</MudText>

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{

    <MudTable Items="@Elements" Breakpoint="Breakpoint.None" Hover="true" Loading="@_loading" HorizontalScrollbar="true" FixedHeader="true" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh></MudTh>
            @foreach (var matchup in matchups)
            {
                <MudTh>
                    <div style="display:flex;align-items:center;justify-content:center">
                        <SVGFlag CountryCode="@GetCountryCode(@matchup.HomeTeamId)" FlagType="FlagType.Wide" Width="30" Height="30" /> &zwnj; : &zwnj;  <SVGFlag CountryCode="@GetCountryCode(@matchup.GuestTeamId)" FlagType="FlagType.Wide" Width="30" Height="30" />
                    </div>
                </MudTh>
            }
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.userName</MudTd>
            @foreach (var matchup in matchups)
            {
                if (context.predictions.Any(_ => _.MatchupId == matchup.Id))
                {
                    var a = context.predictions.FirstOrDefault(_ => _.MatchupId == matchup.Id);
                    <MudTd DataLabel="@GetMatchLabel(@matchup.HomeTeamId, @matchup.GuestTeamId)" HideSmall="false">
                        <div style="display:flex;align-items:center;justify-content:center">
                            @a.HomeTeamScore : @a.GuestTeamScore
                        </div>
                    </MudTd>
                }
                else
                {
                    <MudTd DataLabel="@GetMatchLabel(@matchup.HomeTeamId, @matchup.GuestTeamId)" HideSmall="false">
                        <div style="display:flex;align-items:center;justify-content:center">
                            - : - 
                        </div>
                    </MudTd>
                }
            }
        </RowTemplate>
    </MudTable>
}


@code {
    private bool _loading = true;
    List<Matchup> matchups { get; set; }
    private List<UserPredictions> Elements = new List<UserPredictions>();


    protected override async Task OnInitializedAsync()
    {
        matchups = await matchupRepo.GetAll();
        var users = userRepository.GetAll();

        foreach (var user in users)
        {
            Elements.Add(new UserPredictions
                {
                    userId = user.Id,
                    userName = user.UserName,
                    predictions = predictionsRepository.GetUserPredictions(new Guid(user.Id)),
                });
        }

        await base.OnInitializedAsync();
        _loading = false;
    }


    public string GetMatchLabel(int homeCountryId, int guestCountryId)
    {
        return countryRepository.GetCountryFlagCode(homeCountryId) + " - " + countryRepository.GetCountryFlagCode(guestCountryId);
    }

    public string GetCountryCode(int id)
    {
        return countryRepository.GetCountryFlagCode(id);
    }

    public class UserPredictions
    {
        public string userId { get; set; }
        public string userName { get; set; }
        public List<Prediction> predictions { get; set; }
    }
}
