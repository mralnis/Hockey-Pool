@using static HockeyPool.Components.BettingOverview.BettingOverview
@attribute [Authorize]

@inject UnitOfWork unitOfWork;
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IHttpContextAccessor httpContextAccessor

<MudTd DataLabel="@GetMatchLabel(@Matchup.HomeTeamId, @Matchup.GuestTeamId)" HideSmall="false">
    @if (Matchup.GameTime.Value < DateTime.Now)
    {
        @if (@Prediction.HomeTeamScore.HasValue)
        {
            <div class="content-align" style="padding-right:20px">
                @Prediction.HomeTeamScore : @Prediction.GuestTeamScore
            </div>
        }
        else
        {
            <div class="content-align" style="padding-right:20px">
                - : -
            </div>

        }

        @if (@Prediction?.PointsEarned != null)
        {
            <div class="content-align" style="padding-right:20px">
                @{
                    @Prediction?.PointsEarned
                }p
            </div>
        }
        else
        {
            <div class="content-align" style="padding-right:20px">
                0p
            </div>
        }
    }
    else
    {
        <div class="content-align">
            @if (IsCurrentUserPrediction)
            {
                @if (@Prediction.HomeTeamScore.HasValue)
                {
                    <div>@Prediction.HomeTeamScore : @Prediction.GuestTeamScore </div>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" @onclick="((e) => OpenEditPredictionDialogAsync(Matchup, Prediction))" Size="Size.Small" />
                }
                else
                {
                    <div> - : - </div>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" @onclick="((e) => OpenEditPredictionDialogAsync(Matchup,Prediction,true))" Size="Size.Small" />
                }
            }
            else
            {
                <div style="padding-right:20px"> ? : ? </div>
            }
        </div>
    }
</MudTd>

@code {
    [Parameter]
    public Matchup Matchup { get; set; }
    [Parameter]
    public Prediction Prediction { get; set; }
    [Parameter]
    public bool IsCurrentUserPrediction { get; set; }

    public string GetMatchLabel(int homeCountryId, int guestCountryId)
    {
        return unitOfWork.CountryRepository.GetByIdAsync(homeCountryId).Result.FlagCode + " - " + unitOfWork.CountryRepository.GetByIdAsync(guestCountryId).Result.FlagCode;
    }

    private async Task OpenEditPredictionDialogAsync(Matchup matchup, Prediction prediction, bool isNewPrediction = false)
    {
        var dialogResult = await CallDialogAsync(matchup, prediction);

        if (dialogResult.Canceled || matchup.GameTime.Value <= DateTime.Now)
        {
            ShowNotification("Prognoze netika pievienota", Severity.Warning, Guid.Empty);
            return;
        }
        var userAgent = string.Empty;
        var ipAddress = string.Empty;

        try
        {
            userAgent = httpContextAccessor.HttpContext.Request.Headers["User-Agent"];
            ipAddress = httpContextAccessor.HttpContext.Connection.RemoteIpAddress.ToString();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }


        if (isNewPrediction)
        {
            await unitOfWork.PredictionsRepository.AddAsync(prediction, ipAddress, userAgent);
        }
        else
        {
            await unitOfWork.PredictionsRepository.UpdateAsync(prediction, ipAddress, userAgent);
        }

        ShowNotification("Prognoze veiksmīgi pievienota", Severity.Success, prediction.AspNetUserId);

        this.StateHasChanged();
    }

    public async Task<DialogResult> CallDialogAsync(Matchup matchup, Prediction prediction)
    {
        var parameters = new DialogParameters<ScoreDialog>();

        parameters.Add(_ => _.Matchup, matchup);
        parameters.Add(_ => _.Prediction, prediction);

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<ScoreDialog>("Ievadi savu prognozi", parameters, options);

        return await dialog.Result;
    }


    public void ShowNotification(string message, Severity severity, Guid userId)
    {
        // if (userId != Guid.Empty)
        // {
        //     var user = unitOfWork.UserRepository.GetByIdAsync(userId.ToString()).Result;

        //     if (user.UserName == "Aivis")
        //     {
        //         Snackbar.Add("Nebūs!!!Raivis saka mēģini velreiz!", severity, config =>
        //         {
        //             config.RequireInteraction = false;
        //             config.ShowCloseIcon = false;
        //             config.VisibleStateDuration = 10000;
        //             config.HideTransitionDuration = 500;
        //             config.ShowTransitionDuration = 500;
        //         });
        //     }
        // }

        Snackbar.Add(message, severity, config =>
               {
                   config.RequireInteraction = false;
                   config.ShowCloseIcon = false;
                   config.VisibleStateDuration = 1000;
                   config.HideTransitionDuration = 250;
                   config.ShowTransitionDuration = 250;
               });

    }
}
