@page "/Overview"
@attribute [Authorize]

@using HockeyPool.Infrastructure.Data.Repos
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UnitOfWork unitOfWork

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudTable Items="@UserPredictionsList.OrderByDescending(x => x.userId== CurrentUserID)"
              Breakpoint="Breakpoint.None" Hover="true" Loading="@_loading"
              HorizontalScrollbar="true"
              FixedHeader="true"
              LoadingProgressColor="Color.Info"
              Filter="new Func<UserPredictions,bool>(FilterFunc1)"
              GroupHeaderStyle="background-color:inherit;">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Immediate="true" Placeholder="Meklēt spēlētāju" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="background-color:inherit;"></MudTh>
            @foreach (var matchup in matchups)
            {
                <MatchupItem matchup="@matchup" />
            }
            <MudTh Style="background-color:inherit;"><MudTableSortLabel SortBy="new Func<UserPredictions, object>(x=>x.predictions.Sum(_=> _.PointsEarned ?? 0))">Punkti</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">
                @if (context.userName == "Edgars")
                {                    
                    <img src="./medal1.png" title="Iepriekšējā gada uzvarētājs" alt="Iepriekšējā gada uzvarētājs"> <img />
                }
                @if (context.userName == "Krii")
                {
                    <img src="./medal2.png" title="Iepriekšējā gada 2. vieta" alt="Iepriekšējā gada uzvarētājs"> <img />
                }
                @if (context.userName == "Oskars" || context.userName == "Laura")
                {
                    <img src="./medal3.png" title="Iepriekšējā gada 3. vieta" alt="Iepriekšējā gada uzvarētājs"> <img />
                }
                @context.userName      
                </MudTd>
                    @foreach (var matchup in matchups)
                    {
                    <PredictionItem Matchup="@matchup" Prediction="@context.predictions.First(_ => _.MatchupId == @matchup.Id)" IsCurrentUserPrediction="@IsCurrentUser(context.userId)" />
                    }
                <MudTd Class="align-content-center" DataLabel="Punkti">
                        @context.predictions.Sum(_ => _.PointsEarned ?? 0)
                </MudTd>
            </RowTemplate>
        </MudTable>
                }

                @code
                {
            List<Matchup> matchups { get; set; }
            Guid CurrentUserID { get; set; }
    private string searchString1 = "";

        private List<UserPredictions> UserPredictionsList { get; set; } = new List<UserPredictions>();

        private bool _loading = true;

        protected override async Task OnInitializedAsync()
        {
            matchups = await unitOfWork.MatchupRepository.GetAllAsync();
            var users = await unitOfWork.UserRepository.GetAllAsync();

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;

            // Check if the user is authenticated
            if (currentUser.Identity.IsAuthenticated)
            {
                // Retrieve the user's ID
                CurrentUserID = new Guid(currentUser.FindFirst(ClaimTypes.NameIdentifier)?.Value);
            }

            foreach (var user in users)
            {
                UserPredictionsList.Add(new UserPredictions
                {
                    userId = new Guid(user.Id),
                    userName = user.UserName,
                    predictions = unitOfWork.PredictionsRepository.GetUserPredictions(new Guid(user.Id)),
                });

                foreach (var matchup in matchups)
                {
                    var prediction = UserPredictionsList.Last().predictions.FirstOrDefault(_ => _.MatchupId == matchup.Id);
                    if (prediction == null)
                    {
                        UserPredictionsList.Last().predictions.Add(new Prediction
                        {
                            AspNetUserId = new Guid(user.Id),
                            MatchupId = matchup.Id,
                        });
                    }
                }
            }


            _loading = false;

            await base.OnInitializedAsync();
        }

        public bool IsCurrentUser(Guid userId)
        {
            return userId == CurrentUserID;
        }

        private bool FilterFunc1(UserPredictions prediction) => FilterFunc(prediction, searchString1);

        private bool FilterFunc(UserPredictions prediction, string searchString)
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;

            if (prediction.userName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            if (prediction.predictions.Any(_ => _.PointsEarned.ToString() == searchString))
                return true;

            return false;
        }
}