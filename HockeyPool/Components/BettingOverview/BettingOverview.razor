@page "/Overview"
@attribute [Authorize]

@using HockeyPool.Infrastructure.Data.Repos
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UnitOfWork unitOfWork
@inject ProtectedLocalStorage LocalStorage

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudTable Items="@UserPredictionsList.OrderByDescending(x => x.userId== CurrentUserID)"
              Breakpoint="Breakpoint.None" 
              Hover="true"
              HorizontalScrollbar="true"
              FixedHeader="true"
              LoadingProgressColor="Color.Info"
              Filter="new Func<UserPredictions,bool>(FilterFunc1)"
              GroupHeaderStyle="background-color:inherit;">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Immediate="true" Placeholder="Meklēt spēlētāju" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="background-color:inherit;width:200px;">Balvu fonds:@PrizeMoney€ </MudTh>
            @foreach (var matchup in matchups)
            {
                <MatchupItem matchup="@matchup" />
            }
            <MudTh Style="background-color:inherit;"><MudTableSortLabel SortBy="new Func<UserPredictions, object>(x=>x.predictions.Sum(_=> _.PointsEarned ?? 0))">Punkti</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">
                @context.userName
                @if (context.userName == "Edgars")
                {
                    <img src="./images/crown1.svg" width="16" height="16" style="margin-bottom:13px" title="Iepriekšējā gada uzvarētājs" alt="Iepriekšējā gada uzvarētājs"> <img />
                }
                @if (context.userName == "Krii")
                {
                    <img src="./images/crown2.svg" width="16" height="16" style="margin-bottom:13px" title="Iepriekšējā gada 2. vieta" alt="Iepriekšējā gada uzvarētājs"> <img />
                }
                @if (context.userName == "Oskars" || context.userName == "Laura")
                {
                    <img src="./images/crown3.svg" width="16" height="16" style="margin-bottom:13px" title="Iepriekšējā gada 3. vieta" alt="Iepriekšējā gada uzvarētājs"> <img />
                }
            </MudTd>
            @foreach (var matchup in matchups)
            {
                <PredictionItem Matchup="@matchup" Prediction="@context.predictions.First(_ => _.MatchupId == @matchup.Id)" IsCurrentUserPrediction="@IsCurrentUser(context.userId)" />
            }
            <MudTd Class="align-content-center" DataLabel="Punkti">
                @context.predictions.Sum(_ => _.PointsEarned ?? 0)
            </MudTd>
        </RowTemplate>
    </MudTable>
    <MudPaper class="d-flex justify-end flex-wrap">
        <MudSwitch @bind-Value="@hideFinishedGames" Color="Color.Primary">Paslēpt notikušās spēles</MudSwitch>
        <MudSwitch @bind-Value="@hideUpComingGames" Color="Color.Primary">Paslēpt gaidāmās spēles</MudSwitch>
    </MudPaper>
    <div Style="padding-bottom:20px"></div>
}

@code
{
    bool _hideFinishedGames;
    private bool hideFinishedGames
    {
        get { return _hideFinishedGames; }
        set
        {
            _hideFinishedGames = value;
            matchups = GetMatchupsAsync().Result;
            LocalStorage.SetAsync("HideFinishedGamesSetting", value).AndForget();
            StateHasChanged();
        }
    }
    bool _hideUpComingGames;
    private bool hideUpComingGames
    {
        get { return _hideUpComingGames; }
        set
        {
            _hideUpComingGames = value;
            matchups = GetMatchupsAsync().Result;
            LocalStorage.SetAsync("HideUpComingGamesSetting", value).AndForget();
            StateHasChanged();
        }
    }

    List<Matchup> matchups { get; set; }
    Guid CurrentUserID { get; set; }
    int PrizeMoney { get; set; }
    private string searchString1 = "";

    private List<UserPredictions> UserPredictionsList { get; set; } = new List<UserPredictions>();

    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        matchups = await GetMatchupsAsync();
        var users = await unitOfWork.UserRepository.GetAllAsync();
        PrizeMoney = 10 * users.Count;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        // Check if the user is authenticated
        if (currentUser.Identity.IsAuthenticated)
        {
            // Retrieve the user's ID
            CurrentUserID = new Guid(currentUser.FindFirst(ClaimTypes.NameIdentifier)?.Value);
        }

        foreach (var user in users)
        {
            UserPredictionsList.Add(new UserPredictions
                {
                    userId = new Guid(user.Id),
                    userName = user.UserName,
                    predictions = unitOfWork.PredictionsRepository.GetUserPredictions(new Guid(user.Id)),
                });

            foreach (var matchup in await unitOfWork.MatchupRepository.GetAllAsync())
            {
                var prediction = UserPredictionsList.Last().predictions.FirstOrDefault(_ => _.MatchupId == matchup.Id);
                if (prediction == null)
                {
                    UserPredictionsList.Last().predictions.Add(new Prediction
                        {
                            AspNetUserId = new Guid(user.Id),
                            MatchupId = matchup.Id,
                        });
                }
            }
        }

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var hideUpComingGamesSetting = await LocalStorage.GetAsync<bool>("HideUpComingGamesSetting");
            hideUpComingGames = hideUpComingGamesSetting.Success ? hideUpComingGamesSetting.Value : false;

            var hideFinishedGamesSetting = await LocalStorage.GetAsync<bool>("HideFinishedGamesSetting");
            hideFinishedGames = hideFinishedGamesSetting.Success ? hideFinishedGamesSetting.Value : false;

            _loading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public bool IsCurrentUser(Guid userId)
    {
        return userId == CurrentUserID;
    }

    private bool FilterFunc1(UserPredictions prediction) => FilterFunc(prediction, searchString1);

    private bool FilterFunc(UserPredictions prediction, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (prediction.userName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (prediction.predictions.Any(_ => _.PointsEarned.ToString() == searchString))
            return true;

        return false;
    }

    private async Task<List<Matchup>> GetMatchupsAsync()
    {
        var allMatchups = await unitOfWork.MatchupRepository.GetAllAsync();
        var orderedMetchups = new List<Matchup>();

        if (!hideUpComingGames)
        {
            orderedMetchups.AddRange(allMatchups.Where(_ => _.GameTime > DateTime.Now).ToList());
        }

        if (!hideFinishedGames)
        {
            orderedMetchups.AddRange(allMatchups.Where(_ => _.GameTime <= DateTime.Now).ToList());
        }


        return orderedMetchups;
    }
}