@page "/Overview"
@using HockeyPool.Infrastructure.Data.Repos
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject MatchupRepository matchupRepo
@inject UserRepository userRepository
@inject PredictionsRepository predictionsRepository

<MudText Typo="Typo.h3" Style="color:white">Rezultāti!</MudText>

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudTable Items="@UserPredictionsList.OrderByDescending(x => x.userId== CurrentUserID)" Breakpoint="Breakpoint.None" Hover="true" Loading="@_loading" HorizontalScrollbar="true" FixedHeader="true" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh></MudTh>
            @foreach (var matchup in matchups)
            {
                <MatchupItem matchup="@matchup" />
            }
            <MudTh> Punkti</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.userName</MudTd>
            @foreach (var matchup in matchups)
            {
                <PredictionItem Matchup="@matchup" Prediction="@context.predictions.First(_ => _.MatchupId == @matchup.Id)" IsCurrentUserPrediction="@IsCurrentUser(context.userId)" />
            }
            <MudTd Class="align-content-center" DataLabel="Punkti">
                @context.predictions.Sum(_ => _.PointsEarned ?? 0)
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code
{
    List<Matchup> matchups { get; set; }
    Guid CurrentUserID { get; set; }

    private List<UserPredictions> UserPredictionsList { get; set; } = new List<UserPredictions>();

    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        matchups = await matchupRepo.GetAllAsync();
        var users = await userRepository.GetAllAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        // Check if the user is authenticated
        if (currentUser.Identity.IsAuthenticated)
        {
            // Retrieve the user's ID
            CurrentUserID = new Guid(currentUser.FindFirst(ClaimTypes.NameIdentifier)?.Value);
        }

        foreach (var user in users)
        {
            UserPredictionsList.Add(new UserPredictions
                {
                    userId = new Guid(user.Id),
                    userName = user.UserName,
                    predictions = predictionsRepository.GetUserPredictions(new Guid(user.Id)),
                });

            foreach (var matchup in matchups)
            {
                var prediction = UserPredictionsList.Last().predictions.FirstOrDefault(_ => _.MatchupId == matchup.Id);
                if (prediction == null)
                {
                    UserPredictionsList.Last().predictions.Add(new Prediction
                        {
                            AspNetUserId = new Guid(user.Id),
                            MatchupId = matchup.Id,
                        });
                }
            }
        }


        _loading = false;

        await base.OnInitializedAsync();
    }

    public bool IsCurrentUser(Guid userId)
    {
        return userId == CurrentUserID;
    }
}