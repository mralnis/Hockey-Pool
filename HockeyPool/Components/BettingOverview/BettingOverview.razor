@page "/Overview"
@page "/"
@attribute [Authorize]

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UnitOfWork unitOfWork
@inject ProtectedLocalStorage LocalStorage

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudTable Items="@UserPredictionsList.OrderByDescending(x => x.UserId== CurrentUserID)"
              Breakpoint="Breakpoint.None"
              Hover="true"
              HorizontalScrollbar="true"
              FixedHeader="true"
              LoadingProgressColor="Color.Info"
              Filter="new Func<UserPredictions,bool>(FilterFunc1)"
              GroupHeaderStyle="background-color:inherit;">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Immediate="true" Placeholder="Meklēt spēlētāju" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="background-color:inherit;width:0px;">
                <MudTableSortLabel SortBy="new Func<UserPredictions, object>(x=>x.Predictions.Sum(_=> _.PointsEarned ?? 0))"><MudIcon Icon="@Icons.Material.Filled.SortByAlpha" Size="Size.Small"></MudIcon></MudTableSortLabel>
            </MudTh>
            <MudTh Style="background-color:inherit;width:200px;">Balvu fonds:@PrizeMoney€ </MudTh>
            @foreach (var matchup in matchups)
            {
                <MatchupItem matchup="@matchup" />
            }
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="justify-content-end" style="width:1px;" DataLabel="Punkti">
                @context.Predictions.Sum(_ => _.PointsEarned ?? 0)p
            </MudTd>
                <MudTd Class="text-nowrap" style="max-width: max-content;" DataLabel="Name">  
                @context.UserName
                   <UserIcon Username="@context.UserName" />  
            </MudTd>
            @foreach (var matchup in matchups)
            {
                <PredictionItem Matchup="@matchup" Prediction="@context.Predictions.First(_ => _.MatchupId == @matchup.Id)" IsCurrentUserPrediction="@IsCurrentUser(context.UserId)" />
            }
        </RowTemplate>
    </MudTable>
    <MudPaper class="d-flex justify-end flex-wrap">
        <MudSwitch @bind-Value="@hideFinishedGames" Color="Color.Primary">Paslēpt notikušās spēles</MudSwitch>
        <MudSwitch @bind-Value="@hideUpComingGames" Color="Color.Primary">Paslēpt gaidāmās spēles</MudSwitch>
    </MudPaper>
    <div Style="padding-bottom:20px"></div>
}

@code
{
    bool _hideFinishedGames;
    private bool hideFinishedGames
    {
        get { return _hideFinishedGames; }
        set
        {
            _hideFinishedGames = value;
            matchups = GetMatchupsAsync().Result;
            SetHideFinishedGames(value);
            StateHasChanged();
        }
    }

    bool _hideUpComingGames;
    private bool hideUpComingGames
    {
        get { return _hideUpComingGames; }
        set
        {
            _hideUpComingGames = value;
            matchups = GetMatchupsAsync().Result;
            SetHideUpComingGames(value);
            StateHasChanged();
        }
    }

    List<Matchup> matchups { get; set; }
    Guid CurrentUserID { get; set; }
    int PrizeMoney { get; set; }
    private string searchString1 = "";

    private List<UserPredictions> UserPredictionsList { get; set; } = new List<UserPredictions>();

    private bool _loading = true;

    static string HideUpComingGamesSettingKey = "HideUpComingGamesSetting";
    static string HideFinishedGamesSettingKey = "HideFinishedGamesSetting";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var hideUpComingGamesSetting = await LocalStorage.GetAsync<bool>(HideUpComingGamesSettingKey);
            hideUpComingGames = hideUpComingGamesSetting.Success ? hideUpComingGamesSetting.Value : false;

            var hideFinishedGamesSetting = await LocalStorage.GetAsync<bool>(HideFinishedGamesSettingKey);
            hideFinishedGames = hideFinishedGamesSetting.Success ? hideFinishedGamesSetting.Value : false;
            _loading = false;

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void SetHideUpComingGames(bool value)
    {
        _hideUpComingGames = value;
        LocalStorage.SetAsync(HideUpComingGamesSettingKey, value);
    }

    public void SetHideFinishedGames(bool value)
    {
        _hideFinishedGames = value;
        LocalStorage.SetAsync(HideFinishedGamesSettingKey, value);
    }

    protected override async Task OnInitializedAsync()
    {
        matchups = await GetMatchupsAsync();
        var users = await unitOfWork.UserRepository.GetAllAsync();

        PrizeMoney = 10 * users.Count;

        await SetCurrentUserIdAsync();

        await SetUserPredictionsListAsync(users);
       
        _loading = false;

        await base.OnInitializedAsync();
    }

    private async Task SetUserPredictionsListAsync(List<ApplicationUser> users)
    {
        foreach (var user in users)
        {
            UserPredictionsList.Add(new UserPredictions
                {
                    UserId = new Guid(user.Id),
                    UserName = user.UserName,
                    Predictions = unitOfWork.PredictionsRepository.GetUserPredictions(new Guid(user.Id)),
                });

            foreach (var matchup in await unitOfWork.MatchupRepository.GetAllAsync())
            {
                var prediction = UserPredictionsList.Last().Predictions.FirstOrDefault(_ => _.MatchupId == matchup.Id);
                if (prediction == null)
                {
                    UserPredictionsList.Last().Predictions.Add(new Prediction
                        {
                            AspNetUserId = new Guid(user.Id),
                            MatchupId = matchup.Id,
                        });
                }
            }
        }
    }

    private async Task SetCurrentUserIdAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        if (currentUser.Identity.IsAuthenticated)
        {
            CurrentUserID = new Guid(currentUser.FindFirst(ClaimTypes.NameIdentifier)?.Value);
        }
    }

    public bool IsCurrentUser(Guid userId)
    {
        return userId == CurrentUserID;
    }

    private bool FilterFunc1(UserPredictions prediction) => FilterFunc(prediction, searchString1);

    private bool FilterFunc(UserPredictions prediction, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (prediction.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (prediction.Predictions.Any(_ => _.PointsEarned.ToString() == searchString))
            return true;

        return false;
    }

    private async Task<List<Matchup>> GetMatchupsAsync()
    {
        var allMatchups = await unitOfWork.MatchupRepository.GetAllAsync();
        var orderedMetchups = new List<Matchup>();

        if (!hideUpComingGames)
        {
            orderedMetchups.AddRange(allMatchups.Where(_ => _.GameTime.Value.AddHours(4) > DateTime.Now).ToList());
        }

        if (!hideFinishedGames)
        {
            orderedMetchups.AddRange(allMatchups.Where(_ => _.GameTime.Value.AddHours(4) <= DateTime.Now).ToList());
        }

        return orderedMetchups;
    }
}