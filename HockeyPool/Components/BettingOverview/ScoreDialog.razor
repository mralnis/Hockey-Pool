@using static HockeyPool.Components.BettingOverview.BettingOverview

@attribute [Authorize]

@inject UnitOfWork unitOfWork;
@inject NavigationManager NavigationManager

<MudDialog Style="background-color: rgba(55, 55, 64, 0.9); max-width: 100vw; max-height: 100vh; overflow: auto;">
    <DialogContent>
        <MudGrid>
                <MudItem class="content-align" xs="5">
                    <span class="fi fi-@GetCountryCode(@Matchup.HomeTeamId).ToLower()" style="width:50px;height:50px;"></span
                </MudItem>
                <MudItem class="content-align" xs="1">
                </MudItem>
                <MudItem class="content-align" xs="5">
                    <span class="fi fi-@GetCountryCode(@Matchup.GuestTeamId).ToLower()" style="width:50px;height:50px;"></span>
                </MudItem>
            </MudGrid>
        <MudForm Class="d-flex flex-grow-1 gap-4" @ref="form" >
            <MudGrid>
                <MudItem class="content-align" xs="5">                    
                    <MudNumericField RequiredError="Nepieciešams rezultāts" Required="true" T="int?" @bind-Value="HomeScore" Min="0" Max="20" Label="@GetCountryCode(@Matchup.HomeTeamId)" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem class="content-align" xs="1">
                    <MudText>VS</MudText>
                </MudItem>
                <MudItem class="content-align" xs="5">                  
                    <MudNumericField RequiredError="Nepieciešams rezultāts" Required="true" MaxLength="10" T="int?" @bind-Value="GuestScore" Min="0" Max="20" Label="@GetCountryCode(@Matchup.GuestTeamId)" Variant="Variant.Outlined" />
                </MudItem>
            </MudGrid>          
        </MudForm>
    </DialogContent>
    <DialogActions >
        <MudButton OnClick="Cancel">Atcelt</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    int? HomeScore { get; set; }
    int? GuestScore { get; set; }

    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public Prediction Prediction { get; set; }
    [Parameter] public Matchup Matchup { get; set; }

    MudForm form;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        HomeScore = Prediction.HomeTeamScore;
        GuestScore = Prediction.GuestTeamScore;
    }

    public string GetCountryCode(int? id)
    {
        if (id == null)
        {
            return "EU";
        }
        return unitOfWork.CountryRepository.GetByIdAsync(id.Value).Result.FlagCode;
    }

    async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            if (HomeScore == GuestScore)
            {
                NavigationManager.NavigateTo("/Rules");
            }

            if (Prediction.HomeTeamScore == HomeScore && Prediction.GuestTeamScore == GuestScore)
            {
                MudDialog.Cancel();
                return;
            }

            Prediction.HomeTeamScore = HomeScore;
            Prediction.GuestTeamScore = GuestScore;

            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    void Cancel() => MudDialog.Cancel();
}