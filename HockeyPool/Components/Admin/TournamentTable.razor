@page "/Admin/Tournaments"
@attribute [Authorize(Roles = "Admin")]

@inject UnitOfWork unitOfWork;
@inject NavigationManager _navigationManager

<MudContainer Class="mt-16" MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h4">Turnīri</MudText>
    <MudTable Items="@Tournaments"
              T="TournamentViewModel"
              @ref="_table"
              Hover="true"
              CanCancelEdit="true"
              SortLabel="Sort By"
              CommitEditTooltip="Commit Edit"
              RowEditPreview="BackupItem"
              RowEditCancel="ResetItemToOriginalValues"
              RowEditCommit="ItemHasBeenCommitted"
              ApplyButtonPosition="TableApplyButtonPosition.End"
              EditButtonPosition="TableEditButtonPosition.End"
              EditTrigger="TableEditTrigger.EditButton"
              Breakpoint="Breakpoint.None">

        <HeaderContent>
            <MudTh ><MudTableSortLabel SortBy="new Func<TournamentViewModel, object>(x=>x.CountryName)">Norises valsts</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<TournamentViewModel, object>(x=>x.Tournament.StartDate ?? DateTime.MinValue)">Sākuma datums</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<TournamentViewModel, object>(x=>x.Tournament.EndDate ?? DateTime.MinValue)">Beigu datums</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<TournamentViewModel, object>(x=>x.Tournament.Name)">Nosaukums</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<TournamentViewModel, object>(x=>x.Tournament.IsActive)">Aktīvs</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<TournamentViewModel, object>(x=>x.Tournament.PointsForPerfect)">Punkti par precīzu minejumi</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<TournamentViewModel, object>(x=>x.Tournament.PointForDifference)">Punkti par uzminētu starpību</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<TournamentViewModel, object>(x=>x.Tournament.PointsForWinnerOnly)">Punkti par uzminētu uzvarētāju</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="CountryName">@context.CountryName</MudTd>
            <MudTd DataLabel="StartDate">@context.Tournament.StartDate.Value.ToString("dd.MM.yyyy")</MudTd>
            <MudTd DataLabel="EndDate">@context.Tournament.EndDate.Value.ToString("dd.MM.yyyy")</MudTd>
            <MudTd DataLabel="Name">@context.Tournament.Name</MudTd>
            <MudTd DataLabel="IsActive"> <MudCheckBox @bind-Value="@context.Tournament.IsActive" Disabled="true"></MudCheckBox></MudTd>
            <MudTd DataLabel="PointsForPerfect">@context.Tournament.PointsForPerfect</MudTd>
            <MudTd DataLabel="PointForDifference">@context.Tournament.PointForDifference</MudTd>
            <MudTd DataLabel="PointsForWinnerOnly">@context.Tournament.PointsForWinnerOnly</MudTd>
            <MudTd DataLabel="Delete"></MudTd>
        </RowTemplate>

        <RowEditingTemplate>
            <MudTd DataLabel="Country" >
                <MudSelect FullWidth="true" @bind-Value="@context.Tournament.CountryId">
                    @foreach (Country item in Countries)
                    {
                        <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>
            <MudTd Style="width:fit-content" DataLabel="StartDate">
                <MudDatePicker Style="width:fit-content" Date="@context.Tournament.StartDate"></MudDatePicker>
            </MudTd>
            <MudTd DataLabel="EndDate">
                <MudDatePicker Style="width:fit-content" Date="@context.Tournament.EndDate"></MudDatePicker>
            </MudTd>
            <MudTd DataLabel="Name">
                <MudTextField @bind-Value="@context.Tournament.Name" />
            </MudTd>
            <MudTd DataLabel="IsActive">
                <MudCheckBox @bind-Value="@context.Tournament.IsActive"></MudCheckBox>
            </MudTd>
            <MudTd DataLabel="PointsForPerfect">
                <MudNumericField Style="width:fit-content" RequiredError="Nepieciešami punkti" MaxLength="10"  @bind-Value="@context.Tournament.PointsForPerfect" Min="0" Max="10" Variant="Variant.Text" />
            </MudTd>
            <MudTd DataLabel="PointForDifference">
                <MudNumericField Style="width:fit-content" RequiredError="Nepieciešami punkti" MaxLength="10" @bind-Value="@context.Tournament.PointForDifference" Min="0" Max="10" Variant="Variant.Text" />
            </MudTd>
            <MudTd DataLabel="PointsForWinnerOnly">
                <MudNumericField Style="width:fit-content" RequiredError="Nepieciešami punkti" MaxLength="10" @bind-Value="@context.Tournament.PointsForWinnerOnly" Min="0" Max="10" Variant="Variant.Text" />
            </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" @onclick="(() =>  DeleteRowAsync(context))"></MudIconButton>
            </MudTd>
        </RowEditingTemplate>

        <EditButtonContent Context="button">
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
        </EditButtonContent>

    </MudTable>

    <div class="d-flex justify-end mt-4">
        <MudButton StartIcon="@Icons.Material.Outlined.Add" Color="@Color.Primary" OnClick="AddNewTournament" Variant="Variant.Filled">Izveidot jaunu turnīru</MudButton>
    </div>
</MudContainer>

@code {
    private TournamentViewModel? TournamentBeforeEdit;
    private MudTable<TournamentViewModel> _table;

    private List<TournamentViewModel> Tournaments = new List<TournamentViewModel>();
    private List<Country> Countries = new List<Country>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task<int> LoadData()
    {
        Tournaments = new List<TournamentViewModel>();
        Countries = await unitOfWork.CountryRepository.GetAllAsync();
        var baseTournaments = await unitOfWork.TournamentRepository.GetAllAsync();


        foreach (var tournament in baseTournaments)
        {
            var tournamentViewModel = new TournamentViewModel();
            tournamentViewModel.Tournament = tournament;
            tournamentViewModel.CountryName = Countries.FirstOrDefault(x => x.Id == tournament.CountryId)?.Name;
            Tournaments.Add(tournamentViewModel);
        }
        return 0;
    }

    private async Task AddNewTournament()
    {
        var defoultCountrie = Countries.FirstOrDefault();
        var tournament = new TournamentViewModel()
            {
                IsNew = true,
                CountryName = defoultCountrie?.Name,
                Tournament = new Tournament()
                {
                    StartDate = DateTime.Now,
                    EndDate = DateTime.Now.AddDays(20),
                    PointForDifference = 3,
                    PointsForPerfect = 5,
                    PointsForWinnerOnly = 1,
                    CountryId = defoultCountrie?.Id ?? 0
                }
            };
        Tournaments.Add(tournament);

        await Task.Delay(50);
        _table.SetSelectedItem(tournament);
        _table.SetEditingItem(tournament);
    }

    private async Task DeleteRowAsync(TournamentViewModel tournamentViewModel)
    {
        Tournaments.Remove(tournamentViewModel);
        await Task.Delay(50);
        _table.SetSelectedItem(null);
        _table.SetEditingItem(null);
        StateHasChanged();

        if (tournamentViewModel.IsNew)
        {
            return;
        }
        await unitOfWork.TournamentRepository.RemoveAsync(tournamentViewModel.Tournament);
    }

    private void BackupItem(object TournamentObject)
    {
        var TournamentViewModel = (TournamentViewModel)TournamentObject;
        TournamentBeforeEdit = TournamentViewModel;
    }

    private async void ItemHasBeenCommitted(object Tournament)
    {
        var TournamentViewModel = (TournamentViewModel)Tournament;
        if (TournamentViewModel.IsNew)
        {
            await unitOfWork.TournamentRepository.AddAsync(TournamentViewModel.Tournament);
        }
        else
        {
            await unitOfWork.TournamentRepository.UpdateAsync(TournamentViewModel.Tournament);
        }
        _navigationManager.NavigateTo("/admin/Tournaments", true);
    }

    private void ResetItemToOriginalValues(object TournamentObject)
    {
        TournamentObject = TournamentBeforeEdit;
    }

    public class TournamentViewModel
    {
        public Tournament Tournament { get; set; }
        public string? CountryName { get; set; }
        public bool IsNew { get; set; }
    }
}