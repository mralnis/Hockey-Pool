@using System.Globalization
@using System.Reflection
@using System

<div class="">
    <MudDatePicker Label="@Label"
                   Date="dateTime"
                   DateChanged="DateChanged"
                   DateFormat="@datePattern"
                   TitleDateFormat="@datePatternLong"
                   FirstDayOfWeek="@firstDayOfWeek"
                   Editable="true"
                   Disabled="ReadOnly" 
                   Required="Required" 
                   RequiredError="@RequiredError" 
                   Style="@(string.IsNullOrEmpty(Label)?"margin-top:0px;":"")" />

    <MudTimePicker Label="@LabelTime"
                   Time="@(dateTime.HasValue ? dateTime.Value.TimeOfDay : null)"
                   TimeChanged="TimeChanged"
                   AmPm="timeAmPm" 
                   Culture="CultureInfo.CurrentCulture"
                   Editable="true" 
                   Disabled="ReadOnly" 
                   Required="Required" 
                   RequiredError="@RequiredError" 
                   Style="@(string.IsNullOrEmpty(Label)?"margin-top:0px;":"")" />
</div>

@code {
    [Parameter] public DateTime? Value { get; set; }
    [Parameter] public EventCallback<DateTime?> ValueChanged { get; set; }
    [Parameter] public string Label { get; set; } = null;
    [Parameter] public string LabelTime { get; set; } = null;
    [Parameter] public bool ReadOnly { get; set; } = false;
    [Parameter] public bool Required { get; set; } = false;
    [Parameter] public string RequiredError { get; set; } = "Required";

    string datePattern
    {
        get
        {
            return CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;
        }
    }

    string datePatternLong
    {
        get
        {
            return "ddd, " + CultureInfo.CurrentCulture.DateTimeFormat.MonthDayPattern;
        }
    }

    DayOfWeek firstDayOfWeek
    {
        get
        {
            return CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
        }
    }

    bool timeAmPm
    {
        get
        {
            return CultureInfo.CurrentCulture.DateTimeFormat.ShortTimePattern.EndsWith("tt");
        }
    }

    DateTime? dateTime;

    protected override async Task OnParametersSetAsync()
    {

        dateTime = Value;

        await base.OnParametersSetAsync();
    }

    async Task DateChanged(DateTime? dt)
    {
        if (dt.HasValue)
        {
            dateTime = new DateTime(
                dt.Value.Year,
                dt.Value.Month,
                dt.Value.Day,
                dateTime.HasValue ? dateTime.Value.Hour : 0,
                dateTime.HasValue ? dateTime.Value.Minute : 0,
                0
            );

            await DateTimeChanged();
        }

    }

    async Task TimeChanged(TimeSpan? ts)
    {
        if (ts.HasValue)
        {
            dateTime = new DateTime(
                dateTime.HasValue ? dateTime.Value.Year : DateTime.Now.Year,
                dateTime.HasValue ? dateTime.Value.Month : DateTime.Now.Month,
                dateTime.HasValue ? dateTime.Value.Day : DateTime.Now.Day,
                ts.Value.Hours,
                ts.Value.Minutes,
                0
            );

            await DateTimeChanged();
        }
        
    }

    async Task DateTimeChanged()
    {
        TimeZoneInfo tzi = TimeZoneInfo.Local;
        DateTime dateTimeOffset = new DateTime(
            dateTime.Value.Year,
            dateTime.Value.Month,
            dateTime.Value.Day,
            dateTime.Value.Hour,
            dateTime.Value.Minute,
            0);
        await ValueChanged.InvokeAsync(dateTimeOffset);
    }

}