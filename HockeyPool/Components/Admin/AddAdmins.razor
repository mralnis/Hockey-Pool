@page "/Admin/AddAdmin"
@attribute [Authorize(Roles = "Admin")]

@using HockeyPool.Infrastructure.Data.Models
@using HockeyPool.Services
@using Microsoft.AspNetCore.Identity

@inject UnitOfWork unitOfWork;
@inject ISnackbar Snackbar

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h4">Administratoru saraksts</MudText>

    <MudTable Items="@userRoles"
              T="RoleViewModel"
              @ref="_table"
              Hover="true"
              CanCancelEdit="true"
              SortLabel="Sort By"
              CommitEditTooltip="Commit Edit"
              RowEditPreview="BackupItem"
              RowEditCancel="ResetItemToOriginalValues"
              RowEditCommit="ItemHasBeenCommitted"
              ApplyButtonPosition="TableApplyButtonPosition.End"
              EditButtonPosition="TableEditButtonPosition.End"
              EditTrigger="@TableEditTrigger.EditButton"
              Breakpoint="Breakpoint.None">

        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<RoleViewModel, object>(x=>x.User.Email)">Lietotājs</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<RoleViewModel, object>(x=>x.Rolle.Name)">Loma</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd>@context?.User?.Email</MudTd>
            <MudTd>@context?.Rolle?.Name</MudTd>
            <MudTd></MudTd>
        </RowTemplate>

        <RowEditingTemplate>
            <MudTd>
                <MudSelect T="ApplicationUser" @bind-Value="@context.User">
                    @foreach (ApplicationUser item in eligibleUsers)
                    {
                        <MudSelectItem Value="@item">@item.Email</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>
            <MudTd>
                <MudSelect T="IdentityRole" @bind-Value="@context.Rolle">
                    @foreach (IdentityRole item in roles)
                    {
                        <MudSelectItem Value="@item">@item.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" @onclick="@(() => DeleteRowAsync(@context))"></MudIconButton>
            </MudTd>
        </RowEditingTemplate>

        <EditButtonContent Context="button">
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
        </EditButtonContent>
    </MudTable>

    <div class="d-flex justify-end mt-4">
        <MudButton StartIcon="@Icons.Material.Outlined.Add" Color="@Color.Primary" OnClick="AddAdmin" Variant="Variant.Filled">Pievienot jaunu Adminu</MudButton>
    </div>

</MudContainer>


@code {
    List<RoleViewModel> userRoles;
    MudTable<RoleViewModel> _table;
    List<ApplicationUser> eligibleUsers;
    List<IdentityRole> roles;
    RoleViewModel roleViewModelBeforeEdit;


    override protected async Task OnInitializedAsync()
    {
        userRoles = new List<RoleViewModel>();
        var allUsers = await unitOfWork.UserRepository.GetAllAsync();
        var userRolesList = await unitOfWork.UserRepository.GetAllUserRolles();
        roles = await unitOfWork.RoleRepository.GetAllAsync();

        eligibleUsers = allUsers;
        foreach (var userRole in userRolesList)
        {
            var userWithRolle = allUsers.FirstOrDefault(x => x.Id == userRole.UserId);
            var roleViewModel = new RoleViewModel
                {
                    UserRole = userRole,
                    User = userWithRolle,
                    Rolle = roles.FirstOrDefault(x => x.Id == userRole.RoleId),
                };

            userRoles.Add(roleViewModel);
            eligibleUsers.Remove(userWithRolle);
        }

    }

    private async Task AddAdmin()
    {
        var roleViewModel = new RoleViewModel()
            {
                UserRole = null,
                User = null,
                Rolle = roles.FirstOrDefault(),
            };

        userRoles.Add(roleViewModel);

        await Task.Delay(50);
        _table.SetSelectedItem(roleViewModel);
        _table.SetEditingItem(roleViewModel);

        StateHasChanged();
    }

    private async Task DeleteRowAsync(RoleViewModel roleViewModel)
    {
        userRoles.Remove(roleViewModel);

        await Task.Delay(50);
        _table.SetSelectedItem(null);
        _table.SetEditingItem(null);
        StateHasChanged();

        if (roleViewModel.Rolle == null)
        {
            return;
        }

        await unitOfWork.UserRepository.RemoveUserRoleAsync(roleViewModel.UserRole);
        ShowNotification($"Lietotājam {roleViewModel.User.UserName} noņemtas administratora tiesības", Severity.Success);

        eligibleUsers.Add(roleViewModel.User);
        StateHasChanged();
    }

    private void BackupItem(object roleObject)
    {
        var roleViewModel = (RoleViewModel)roleObject;
        roleViewModelBeforeEdit = roleViewModel;
    }

    private async void ItemHasBeenCommitted(object CountryEntity)
    {

        var roleViewModel = (RoleViewModel)CountryEntity;

        if (roleViewModel.UserRole == null)
        {
            if (roleViewModel.User == null || roleViewModel.Rolle == null)
            {
                DeleteRowAsync(roleViewModel);
                return;
            }

            roleViewModel.UserRole = new IdentityUserRole<string>
                {
                    UserId = roleViewModel.User.Id,
                    RoleId = roleViewModel.Rolle.Id
                };

            await unitOfWork.UserRepository.AddUserRoleAsync(roleViewModel.UserRole);
        }
        else
        {
            await unitOfWork.UserRepository.UpdateUserRoleAsync(roleViewModel.UserRole);
        }
        eligibleUsers.Remove(roleViewModel.User);
        ShowNotification($"Lietotājs {roleViewModel.User.UserName} paaugstināts kā administrators", Severity.Success);
    }

    private void ResetItemToOriginalValues(object roleObject)
    {
        var roleViewModel = (RoleViewModel)roleObject;
        if (roleViewModel.User == null || roleViewModel.Rolle == null)
        {
            DeleteRowAsync(roleViewModel);
            return;
        }
        roleObject = roleViewModelBeforeEdit;
    }

    private class RoleViewModel
    {
        public IdentityUserRole<string> UserRole { get; set; }
        public ApplicationUser User { get; set; }
        public IdentityRole Rolle { get; set; }
    }

    public void ShowNotification(string message, Severity severity)
    {
        Snackbar.Add(message, severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = false;
            config.VisibleStateDuration = 600;
            config.HideTransitionDuration = 250;
            config.ShowTransitionDuration = 250;
        });
    }
}