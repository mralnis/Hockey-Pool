@page "/Admin/Countries"
@attribute [Authorize(Roles = "Admin")]

@inject UnitOfWork unitOfWork;

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h4">Dalīb valstis</MudText>

    <MudTable Items="@Countries"
              Class="background-transparent"
              T="Country"
              @ref="_table"
              Hover="true"
              CanCancelEdit="true"
              SortLabel="Sort By"
              CommitEditTooltip="Commit Edit"
              RowEditPreview="BackupItem"
              RowEditCancel="ResetItemToOriginalValues"
              RowEditCommit="ItemHasBeenCommitted"
              ApplyButtonPosition="TableApplyButtonPosition.End"
              EditButtonPosition="TableEditButtonPosition.End"
              EditTrigger="@TableEditTrigger.EditButton"
              Breakpoint="Breakpoint.None">

        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Country, object>(x=>x.Name)">Valsts</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Country, object>(x=>x.FlagCode)">Karoga kods</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Flag Code">@context.FlagCode</MudTd>
            <MudTd DataLabel="Delete"></MudTd>
        </RowTemplate>

        <RowEditingTemplate>
            <MudTd DataLabel="Name">
                <MudTextField @bind-Value="@context.Name" />
            </MudTd>
            <MudTd DataLabel="Flag code">
                <MudTextField @bind-Value="@context.FlagCode" />
            </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" @onclick="@(() => DeleteRowAsync(context))"></MudIconButton>
            </MudTd>
        </RowEditingTemplate>

        <EditButtonContent Context="button">
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
        </EditButtonContent>
    </MudTable>

    <div class="d-flex justify-end mt-4">
        <MudButton StartIcon="@Icons.Material.Outlined.Add" Color="@Color.Primary" OnClick="AddNewCountry" Variant="Variant.Filled">Pievienot jaunu valsti</MudButton>
    </div>

</MudContainer>

@code {
    private MudTable<Country> _table;
    private Country? CountryBeforeEdit;
    private List<Country> Countries = new List<Country>();

    protected override async Task OnInitializedAsync()
    {
        Countries = await unitOfWork.CountryRepository.GetAllAsync();
        await base.OnInitializedAsync();
    }

    private async Task AddNewCountry()
    {
        var Country = new Country();
        Countries.Add(Country);

        await Task.Delay(50);
        _table.SetSelectedItem(Country);
        _table.SetEditingItem(Country);
    }

    private async Task DeleteRowAsync(Country country)
    {
        Countries.Remove(country);

        await Task.Delay(50);
        _table.SetSelectedItem(null);
        _table.SetEditingItem(null);
        StateHasChanged();

        if (country.Id == 0)
        {
            return;
        }

        await unitOfWork.CountryRepository.RemoveAsync(country);
        StateHasChanged();
    }

    private void BackupItem(object CountryObject)
    {
        var Country = (Country)CountryObject;
        CountryBeforeEdit = Country;
    }

    private async void ItemHasBeenCommitted(object CountryEntity)
    {
        var country = (Country)CountryEntity;
        if (country.Id == 0)
        {
            await unitOfWork.CountryRepository.AddAsync(country);
        }
        else
        {
            await unitOfWork.CountryRepository.UpdateAsync(country);
        }
    }

    private void ResetItemToOriginalValues(object CountryObject)
    {
        CountryObject = CountryBeforeEdit;
    }
}