@page "/Admin/Matchups"
@attribute [Authorize(Roles = "Admin")]

@inject UnitOfWork unitOfWork;
@inject NavigationManager _navigationManager

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">

    <MudTable Items="@Matchups"
              T="MatchupViewModel"
              @ref="table"
              Hover="true"
              ReadOnly="false"
              CanCancelEdit="@canCancelEdit"
              @bind-SelectedItem="selectedItem1"
              SortLabel="Sort By"
              CommitEditTooltip="Commit Edit"
              RowEditPreview="BackupItem"
              RowEditCancel="ResetItemToOriginalValues"
              RowEditCommit="ItemHasBeenCommitted"
              ApplyButtonPosition="TableApplyButtonPosition.End"
              EditButtonPosition="TableEditButtonPosition.End"
              EditTrigger="TableEditTrigger.EditButton"
              Breakpoint="Breakpoint.None">

        <ToolBarContent>
            <MudText Typo="Typo.h4">Spēles</MudText>
            <MudSpacer />
            <MudSwitch T="bool" Value=@activeOnly ValueChanged=ActiveOnlyValueChanged Color="Color.Primary">Active only</MudSwitch>
        </ToolBarContent>

        <ColGroup>
            <col style="width:auto;" />
            <col style="width:auto;" />
            <col style="width:auto;" />
            <col style="width:auto;" />
            <col />
            <col />
            <col style="width:auto;" />
            <col style="width:auto;" />
        </ColGroup>

        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<MatchupViewModel, object>(x=>x.TournamentName)">Turnīrs</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<MatchupViewModel, object>(x=>x.HomeCountryName)">Mājas komanda</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<MatchupViewModel, object>(x=>x.GuestCountryName)">Viesu komanda</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<MatchupViewModel, object>(x=>x.Matchup.GameTime ?? DateTime.MinValue)">Spēles laiks</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<MatchupViewModel, object>(x=>x.Matchup.HomeTeamScore ?? 0)">Mājinieku rezultāts</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<MatchupViewModel, object>(x=>x.Matchup.GuestTeamScore ?? 0)">Viesu Rezultāts</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Tournament">@context.TournamentName</MudTd>
            <MudTd DataLabel="HomeTeamId"><SVGFlag CountryCode="@context.HomeCountryFlagCode" FlagType="FlagType.Wide" Width="25" Height="25" style="padding-right:5px" />@context.HomeCountryName</MudTd>
            <MudTd DataLabel="GuestTeamId"><SVGFlag CountryCode="@context.GuestCountryFlagCode" FlagType="FlagType.Wide" Width="25" Height="25" style="padding-right:5px" />@context.GuestCountryName</MudTd>
            <MudTd DataLabel="GameTime">@context.Matchup.GameTime</MudTd>
            <MudTd DataLabel="GuestTeamScore">@context.Matchup.HomeTeamScore</MudTd>
            <MudTd DataLabel="HomeTeamScore">@context.Matchup.GuestTeamScore</MudTd>
            <MudTd DataLabel="Delete"></MudTd>
        </RowTemplate>

        <RowEditingTemplate>
            <MudTd DataLabel="Tournament">
                <MudSelect @bind-Value="@context.Matchup.TournamentId">
                    @foreach (Tournament item in Tournaments)
                    {
                        <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>
            <MudTd DataLabel="Home team">
                <MudSelect @bind-Value="@context.Matchup.HomeTeamId">
                    @foreach (Country item in Countries)
                    {
                        <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>
            <MudTd DataLabel="Guest team">
                <MudSelect @bind-Value="@context.Matchup.GuestTeamId">
                    @foreach (Country item in Countries)
                    {
                        <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>
            <MudTd DataLabel="Game time">
                <MudDateTime @bind-Value="@context.Matchup.GameTime" Required="true"></MudDateTime>
            </MudTd>
            <MudTd DataLabel="Home team score">
                <MudNumericField RequiredError="Nepieciešams rezultāts" MaxLength="10" T="int?" @bind-Value="@context.Matchup.HomeTeamScore" Min="0" Max="20" Label="@context.HomeCountryName" Variant="Variant.Text" />
            </MudTd>
            <MudTd DataLabel="Guest team score">
                <MudNumericField RequiredError="Nepieciešams rezultāts" MaxLength="10" T="int?" @bind-Value="@context.Matchup.GuestTeamScore" Min="0" Max="20" Label="@context.GuestCountryName" Variant="Variant.Text" />
            </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" @onclick="@(() => DeleteRow(context))"></MudIconButton>
            </MudTd>
        </RowEditingTemplate>

        <EditButtonContent Context="button">
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
        </EditButtonContent>
    </MudTable>

    <div class="d-flex justify-end mt-4">
        <MudButton StartIcon="@Icons.Material.Outlined.Add" Color="@Color.Primary" OnClick="AddNewMatchup" Variant="Variant.Filled">Pievienot jaunu spēli</MudButton>
    </div>

</MudContainer>

@code {
    private List<string> editEvents = new();

    private bool canCancelEdit = true;
    private int searchString = 0;
    private bool activeOnly;

    private MatchupViewModel? selectedItem1 = null;
    private MatchupViewModel? MatchupBeforeEdit;

    private HashSet<MatchupViewModel> selectedItems1 = new HashSet<MatchupViewModel>();
    private List<MatchupViewModel> Matchups = new List<MatchupViewModel>();
    private List<Tournament> Tournaments = new List<Tournament>();
    private List<Country> Countries = new List<Country>();

    MudTable<MatchupViewModel> table;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task<int> LoadData()
    {
        Matchups = new List<MatchupViewModel>();
        Tournaments = await unitOfWork.TournamentRepository.GetAllAsync();
        Countries = await unitOfWork.CountryRepository.GetAllAsync();
        var matchups = new List<Matchup>();
        if (activeOnly)
        {
            matchups = await unitOfWork.MatchupRepository.GetActiveMatchupsAsync();
        }
        else
        {
            matchups = await unitOfWork.MatchupRepository.GetAllAsync();
        }

        foreach (var matchup in matchups)
        {
            var homeCountry = Countries.FirstOrDefault(x => x.Id == matchup.HomeTeamId);
            var guestCountry = Countries.FirstOrDefault(x => x.Id == matchup.GuestTeamId);

            var matchupViewModel = new MatchupViewModel();
            matchupViewModel.Matchup = matchup;
            matchupViewModel.TournamentName = Tournaments.FirstOrDefault(x => x.Id == matchup.TournamentId)?.Name;
            matchupViewModel.HomeCountryName = homeCountry?.Name;
            matchupViewModel.HomeCountryFlagCode = homeCountry?.FlagCode;
            matchupViewModel.GuestCountryName = homeCountry?.Name;
            matchupViewModel.GuestCountryFlagCode = homeCountry?.FlagCode;
            Matchups.Add(matchupViewModel);
        }
        StateHasChanged();
        return 0;
    }
    void ActiveOnlyValueChanged(bool value)
    {
        activeOnly = value;
        LoadData();
    }

    private async Task AddNewMatchup()
    {
        var defoultTournament = Tournaments.FirstOrDefault();
        var defoultHomeCountry = Countries.FirstOrDefault();
        var defoultGuestCountry = Countries.LastOrDefault();

        var matchup = new MatchupViewModel()
            {
                IsNew = true,
                GuestCountryName = defoultGuestCountry.Name,
                GuestCountryFlagCode = defoultGuestCountry.FlagCode,
                HomeCountryName = defoultHomeCountry.Name,
                HomeCountryFlagCode = defoultHomeCountry.FlagCode,
                TournamentName = defoultTournament.Name,
                Matchup = new Matchup()
                {
                    GameTime = DateTime.Now,
                    TournamentId = defoultTournament.Id,
                    HomeTeamId = defoultHomeCountry.Id,
                    GuestTeamId = defoultGuestCountry.Id,
                }
            };

        Matchups.Add(matchup);

        await Task.Delay(50);
        table.SetSelectedItem(matchup);
        table.SetEditingItem(matchup);
    }

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private async Task DeleteRow(MatchupViewModel matchupViewModel)
    {
        Matchups.Remove(matchupViewModel);
        if (matchupViewModel.IsNew)
        {
            return;
        }
        await unitOfWork.MatchupRepository.RemoveAsync(matchupViewModel.Matchup);
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object MatchupObject)
    {
        var matchupViewModel = (MatchupViewModel)MatchupObject;
        MatchupBeforeEdit = matchupViewModel;
    }

    private async void ItemHasBeenCommitted(object Matchup)
    {
        var matchupViewModel = (MatchupViewModel)Matchup;
        if (matchupViewModel.IsNew)
        {
            var newItem = await unitOfWork.MatchupRepository.CreateAsync(matchupViewModel.Matchup);
        }
        else
        {
            await unitOfWork.MatchupRepository.EditAsync(matchupViewModel.Matchup);
        }
        _navigationManager.NavigateTo("/admin/matchups", true);
    }

    private void ResetItemToOriginalValues(object MatchupObject)
    {
        MatchupObject = MatchupBeforeEdit;
    }
    public class MatchupViewModel
    {
        public Matchup Matchup { get; set; }
        public string? TournamentName { get; set; }
        public string? HomeCountryName { get; set; }
        public string? HomeCountryFlagCode { get; set; }
        public string? GuestCountryName { get; set; }
        public string? GuestCountryFlagCode { get; set; }
        public bool IsNew { get; set; }
    }
}