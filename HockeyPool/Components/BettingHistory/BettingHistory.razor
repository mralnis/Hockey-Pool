@page "/History"
@attribute [Authorize]

@using System.Security.Claims
@using HockeyPool.Components.BettingOverview

@inject UnitOfWork unitOfWork
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
        <MudTable Items="@userPredictionsLists.OrderByDescending(_=> _.TimeStamp)"
                  Class="background-transparent"
                  Breakpoint="Breakpoint.None"
                  Hover="true"
                  Loading="@_loading"
                  HorizontalScrollbar="true"
                  FixedHeader="true"
                  LoadingProgressColor="Color.Info"
                  GroupBy="@_groupDefinition"
                  Filter="new Func<UserPredictionsHistory,bool>(FilterFunc1)">

            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Immediate="true" Placeholder="Meklēt spēlētāju" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>

            <ColGroup>
                <col style="width: 60px;" />
                <col />
                <col />
                <col />
                <col />
                <col />
            </ColGroup>

            <HeaderContent>
                <MudTh Class="bg-transparent"></MudTh>
                <MudTh Class="bg-transparent"><div class="content-align">Minējums</div></MudTh>
                <MudTh Class="bg-transparent"><div class="content-align">Izmaiņas veiktas</div></MudTh>
            </HeaderContent>

            <GroupHeaderTemplate>
                @*    <MudTh Class="mud-table-cell-custom-group" colspan="6">@context.GroupName</MudTh>
            <MudTh Class="mud-table-cell-custom-group" colspan="6">@($"{context.GroupName}: {context.Key}")</MudTh> *@
                @if (context.GroupName == "Lietotāji")
                {
                    <MudTh Class="mud-table-cell-custom-group" colspan="6">@($"{context.Key}")</MudTh>
                    <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer " colspan="5">Rezultāti mainīti @context.Items.Count() reizes</MudTh>
                }
                else
                {
                    <MudTh>
                        <SVGFlag CountryCode="@context.Items.FirstOrDefault().HomeTeamCountryCode" FlagType="FlagType.Wide" Width="50" Height="50" style="padding-right:5px" />
                        VS
                        <SVGFlag CountryCode="@context.Items.FirstOrDefault().GuestTeamCountryCode" FlagType="FlagType.Wide" Width="50" Height="50" style="padding-left:5px" />
                    </MudTh>
                    <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer " colspan="5">Rezultāts mainīts @context.Items.Count() reizes</MudTh>
                }
                @*                 <MudTh>
            @($"{context.Items.FirstOrDefault().UserName}")
            </MudTh> *@

                @*                 <MudTh>
            @($"{context.Items.MaxBy(_ => _.TimeStamp).TimeStamp}")
            </MudTh> *@
            </GroupHeaderTemplate>

            <RowTemplate>
                <MudTd></MudTd>
                <MudTd>@context.HomeTeamCountryCode - @context.GuestTeamCountryCode</MudTd>
                <MudTd DataLabel="Rezultāts">
                    <div class="content-align">
                        @if (context.CanShow)
                        {
                            <MudText Style="white-space:nowrap;">@context.HomeTeamScore : @context.GuestTeamScore</MudText>
                        }
                        else
                        {
                            <MudText Style="white-space:nowrap;"> ? : ? </MudText>
                        }
                    </div>
                </MudTd>
                <MudTd DataLabel="Laiks">
                    <div class="content-align">
                        <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Size="Size.Small" Style="padding-right:5px" />
                        @context.TimeStamp.ToString("MM.dd")
                    </div>
                    <div class="content-align">
                        <MudIcon Icon="@Icons.Material.Filled.AccessTime" Size="Size.Small" Style="padding-right:5px" />
                        @context.TimeStamp.ToString("HH:mm.ss")
                    </div>
                </MudTd>
            </RowTemplate>

            <GroupFooterTemplate>
                @if (context.GroupName == "Lietotāji")
                {

                }
            </GroupFooterTemplate>
        </MudTable>
    </MudContainer>
}

@code {
    bool _loading = true;
    private string searchString1 = "";

    List<UserPredictionsHistory> userPredictionsLists = new List<UserPredictionsHistory>();

    private TableGroupDefinition<UserPredictionsHistory> _groupDefinition = new()
        {
            GroupName = "Spēles",
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = false,
            Selector = (e) => e.MatchupId,
            InnerGroup = new TableGroupDefinition<UserPredictionsHistory>()
            {
                GroupName = "Lietotāji",
                Expandable = true,
                IsInitiallyExpanded = false,
                Indentation = true,
                Selector = (e) => e.UserName
            }
        };

    protected override async Task OnInitializedAsync()
    {
        var matchups = await unitOfWork.MatchupRepository.GetAllAsync();
        var users = await unitOfWork.UserRepository.GetAllAsync();
        var predictionLogs = await unitOfWork.PredictionLogRepository.GetAllAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        Guid CurrentUserID = Guid.Empty;
        // Check if the user is authenticated
        if (currentUser.Identity.IsAuthenticated)
        {
            // Retrieve the user's ID
            CurrentUserID = new Guid(currentUser.FindFirst(ClaimTypes.NameIdentifier)?.Value);
        }

        foreach (var predictionLog in predictionLogs)
        {
            var matchup = matchups.FirstOrDefault(x => x.Id == predictionLog.MatchupId);
            userPredictionsLists.Add(new UserPredictionsHistory(predictionLog)
                {
                    UserName = users.FirstOrDefault(x => x.Id == predictionLog.AspNetUserId.ToString())?.UserName,
                    HomeTeamCountryCode = GetCountryCode(matchup.HomeTeamId),
                    GuestTeamCountryCode = GetCountryCode(matchup.GuestTeamId),
                    CanShow = CurrentUserID == predictionLog.AspNetUserId || matchup.GameTime.Value <= DateTime.Now
                }

            );
        }

        _loading = false;

        await base.OnInitializedAsync();
    }

    public string GetCountryCode(int? id)
    {
        if (id == null)
        {
            return "EU";
        }
        return unitOfWork.CountryRepository.GetByIdAsync(id.Value).Result.FlagCode;
    }

    private bool FilterFunc1(UserPredictionsHistory prediction) => FilterFunc(prediction, searchString1);

    private bool FilterFunc(UserPredictionsHistory prediction, string searchString)
    {
        if (prediction.GuestTeamCountryCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (prediction.HomeTeamCountryCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (prediction.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        return false;
    }
}
