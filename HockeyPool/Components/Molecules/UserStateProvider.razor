@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage LocalStorage

@if(isLoaded)
{
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
}

@code {
    private bool isLoaded = false;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    public bool HideUpComingGames;
    public bool HideFinishedGames;

    static string HideUpComingGamesSettingKey = "HideUpComingGamesSetting";
    static string HideFinishedGamesSettingKey = "HideFinishedGamesSetting";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var hideUpComingGamesSetting = await LocalStorage.GetAsync<bool>(HideUpComingGamesSettingKey);
            HideUpComingGames = hideUpComingGamesSetting.Success ? hideUpComingGamesSetting.Value : false;

            var hideFinishedGamesSetting = await LocalStorage.GetAsync<bool>(HideFinishedGamesSettingKey);
            HideFinishedGames = hideFinishedGamesSetting.Success ? hideFinishedGamesSetting.Value : false;
            isLoaded = true;
            StateHasChanged();
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }

    public void SetHideUpComingGames(bool value)
    {
        HideUpComingGames = value;
        LocalStorage.SetAsync(HideUpComingGamesSettingKey, value).AndForget();
    }

    public void SetHideFinishedGames(bool value)
    {
        HideFinishedGames = value;
        LocalStorage.SetAsync(HideFinishedGamesSettingKey, value).AndForget();
    }
}